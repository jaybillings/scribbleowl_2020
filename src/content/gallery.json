{
  "title": "Previous Projects",
  "projectOrder": [
    "vspivsei",
    "vsmain",
    "vssearch",
    "xbox",
    "reinav",
    "cheeztv",
    "mtrlike",
    "mtradmin"
  ],
  "projects": {
    "cheeztv": {
      "title": "Cheezburger TV",
      "thumbnail": "cheez-pre.png",
      "year": "2014",
      "uri": "https://cheezburger.com",
      "copy": "*Unfortunately, this webapp has since been removed from the live site. The link provided is to the main site, which does not necessarily contain my work.*\n\nA single page webapp, created for the Cheezburger website. The request was to create a video player flexible enough to handle multiple video providers with minimal or no interruption to the user experience.\n\nThe app is made up of three main views -- the video container, the main video, and the navigation ribbon. The container behaves like other content blocks on the site, accepting social media plugins which can be customized by non-technical publishers.\n\nUsing the navigation ribbon, users can page through video thumbnails and manually initiate playback. Videos also autoplay, which is indicated by a cancel-able countdown.\n\nCommunication of state between various video APIs accomplished via `window.postMessage`. On request, certain partners altered their APIs to enable compatibility with this service, most notably [CollegeHumor](CollegeHumor.com).",
      "tech": [
        [ "window.postMessage", "https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage" ],
        "3rd party video APIs",
        [ "Backbone.js", "https://backbonejs.org/" ],
        [ "ASP.NET", "https://dotnet.microsoft.com/apps/aspnet" ],
        [ "Bootstrap", "https://getbootstrap.com/" ],
        [ "jQuery", "https://jquery.com/" ],
        "Custom CMS"
      ]
    },
    "mtrlike": {
      "title": "Meteor Solutions Like Tool",
      "thumbnail": "liketool-pre.png",
      "year": "2012",
      "copy": "Created for Meteor Solutions, the Like Tool wraps Meteor Solutions' tracking code around popular social media widgets. This provides ad campaign administrators an additional data source for assessing the reach of their campaigns. These data, along with others, are made available on the campaign's dashboard.\n\nIn addition to implementing the widgets themselves, I created a dashboard page that allows users to customize the widgets in a WISYWIG manner. Since individual campaigns implement these widgets within a variety of contexts, the tool was created with flexibility in mind. The WISYWIG editor provides the most common implementation and customization options, but a documentation page describes more advanced options for technically inclined users.",
      "tech": [
        [ "Django", "https://www.djangoproject.com/" ],
        [ "Python 2.7", "https://www.python.org/download/releases/2.7/" ],
        [ "Bootstrap", "https://getbootstrap.com/" ],
        [ "jQuery", "https://jquery.com/" ]
      ]
    },
    "mtradmin": {
      "title": "Meteor Solutions Admin Dashboard",
      "thumbnail": "admindash-pre.png",
      "year": "2011-12",
      "copy": "The Meteor Solutions admin dashboard provides an integrated data view for organizations that use Meteor Solutions' code to track multiple ad campaigns. Previously, data views were only available per-campaign, meaning users had to manually compile various data sources for multi-campaign assessments.",
      "tech": [
        [ "Django", "https://www.djangoproject.com/" ],
        [ "Python 2.7", "https://www.python.org/download/releases/2.7/" ],
        [ "Bootstrap", "https://getbootstrap.com/" ],
        [ "jQuery", "https://jquery.com/" ]
      ]
    },
    "reinav": {
      "title": "REI Navigation",
      "thumbnail": "rei-pre.png",
      "year": "2015",
      "uri": "https://rei.com",
      "copy": "*Live site code does not necessarily contain my work.*\n\nThe header, footer, and mobile menu of the REI main site for the circa 2015 redesign. To maintain compatibility with the rest of the codebase, I used elements from the component library as much as possible, suggesting edits where necessary.",
      "tech": [
        "Internal UI component library",
        "Standard web stack"
      ]
    },
    "vsmain": {
      "title": "Visit Seattle Main Website",
      "thumbnail": "banner_styled.png",
      "year": "2016-19",
      "uri": "https://visitseattle.org",
      "copy": "*As of February 2020, the live site still contains much of my work.*\n\nThe homepage of Visit Seattle, a destination marketing organization for the city of Seattle. My work on this site was wide-ranging and not limited to the web layer -- I also maintained the server and supporting technologies.\n\nThis gallery includes examples of the work I did with the design team to maintain site main site on the frontend.",
      "tech": [
        [ "WordPress", "https://wordpress.org/" ],
        [ "SASS", "https://sass-lang.com/" ],
        [ "Backbone.js", "https://backbonejs.org/" ],
        [ "PHP5 & 7", "https://www.php.net/" ],
        [ "MySQL", "https://www.mysql.com/" ],
        [ "AWS", "https://aws.amazon.com/" ],
        [ "jQuery", "https://jquery.com/" ],
        [ "Advanced Custom Fields (plugin)", "https://www.advancedcustomfields.com/" ],
        ["Gravity Forms (plugin)", "https://www.gravityforms.com/"],
        ["Cookie Content Banner Generator", "https://www.websitepolicies.com/cookie-consent-banner-generator"],
        "API consumption"
      ]
    },
    "vssearch": {
      "title": "Visit Seattle Search",
      "thumbnail": "results-rainier-partners.png",
      "year": "2017",
      "uri": "https://visitseattle.org/?=ice+cream",
      "copy": "*As of February 2020, the live site still contains much of my work.*\n\nThe search function for the Visit Seattle website, a highly customized replacement to the built-in WordPress search that implements ordering search results by relevancy.\n\nThe Visit Seattle website has a number of custom WordPress taxonomies, each with a number of metadata, which provide the filters and sub-filters for search results. Each possible match has a relevancy weight (from 0 to 1), which is configurable on  the WordPress admin. Considering the complicated nature of the search class, I took care to lay out the codebase in a logical manner that future coders can quickly comprehend.\n\nWorking with design, I also updated the front-end, in particular the 'top results' view, which displays a configurable number of results for each matched taxonomy.",
      "tech": [
        [ "WordPress", "https://wordpress.org/" ],
        [ "SASS", "https://sass-lang.com/" ],
        [ "PHP5 & 7", "https://www.php.net/" ],
        [ "MySQL", "https://www.mysql.com/" ],
        [ "jQuery", "https://jquery.com/" ]
      ]
    },
    "vsem": {
      "title": "Visit Seattle Events Manager",
      "thumbnail": "",
      "year": "2019",
      "source": "https://github.com/jaybillings/events-manager-client-public",
      "copy": "A React webapp providing a user-friendly visual interface for managing listings of events. This is specifically pertaining to the client code -- I also coded the server.",
      "tech": [
        [ "React", "https://reactjs.org/" ],
        [ "Feathers", "https://feathersjs.com/" ],
        [ "socket.io", "https://socket.io/" ],
        [ "ECMAScript 6", "http://www.ecma-international.org/ecma-262/6.0/" ],
        [ "SASS", "https://sass-lang.com/" ]
      ]
    },
    "vsemserver": {
      "title": "Visit Seattle Events Manager -- Server Code",
      "thumbnail": "",
      "year": "2019",
      "source": "",
      "copy": "The server code for the Events Manager, written for Visit Seattle. This represents the first server app I created from design to deployment, though I have contributed to server/backend code throughout my career. The code implements several APIs for use with the app, as well as a general data API that was designed to be consumable by 3rd-party sources.",
      "tech": [
        [ "Feathers", "https://feathersjs.com/" ],
        [ "Express", "https://expressjs.com/" ],
        [ "MariaDB", "https://mariadb.org/" ],
        [ "Knex.js", "http://knexjs.org/" ],
        [ "Ajv", "https://www.npmjs.com/package/ajv" ],
        [ "ECMAScript 6", "http://www.ecma-international.org/ecma-262/6.0/" ]
      ]
    },
    "vspivsei": {
      "title": "Visit Seattle Partners/Events Importer",
      "thumbnail": "importer-partners-advanced.png",
      "year": "2018",
      "source": [
        {
          "name": "Partners",
          "uri": "https://github.com/jaybillings/vs-wp-partners-importer-public"
        },{
          "name": "Events",
          "uri": "https://github.com/jaybillings/vs-wp-events-importer-public"
        }
      ],
      "copy": "Two highly similar plugins created for Visit Seattle, the Importers are designed to import 3rd party data as a custom WordPress taxonomy, either \"Partners\" or \"Events\". The plugins refresh their listings on a scheduled basis, via cron, and provide interfaces on the client admin for manual actions.\n\nThese plugins were requested as a functioning version of the plugins provided by the original site authors, which had availability and consistency issues stemming from PHP's limitations on requests. To overcome these issues, the new plugins' server actions are additive, atomic, and operate over a subset of listings. This is what makes it possible for the client to handle the overall process, since each phase is discrete and can be individually requested, and also makes it possible to cancel and resume processes. Here as everywhere, care has been taken to structure the code for comprehensibility and maintainability.\n\nAlthough imports run automatically, there is also an admin client which allows users to manually refresh data. The client has two views -- basic, for non-technical users who only want to refresh the data; and advanced, for technical users who need to manage the dataset on a larger scale.",
      "tech": [
        [ "WordPress", "https://wordpress.org/" ],
        "WordPress plugins",
        [ "SASS", "https://sass-lang.com/" ],
        [ "PHP7", "https://www.php.net/" ],
        [ "MySQL", "https://www.mysql.com/" ],
        [ "jQuery", "https://jquery.com/" ],
        "SimpleView API"
      ]
    },
    "xbox": {
      "title": "Xbox One Purchase Flow",
      "thumbnail": "Purchase-NuiVui.png",
      "year": "2014",
      "copy": "In coordination with the Reach team, I implemented views for the Xbox One, in particular the purchase flow. Originally hired for my front-end skills, I was also able to fully contribute to service, routing, and component development.",
      "tech": [
        "Ember.js",
        "Node.js",
        ".NET",
        "Xbox One platform",
        "Standard web stack"
      ]
    },
    "test": {
      "title": "The Test Project With the Very Long Name",
      "thumbnail": "goat-blep.jpg",
      "year": "20XX",
      "uri": "https://scribbleowl.com",
      "source": "https://github.com",
      "copy": "Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit,\n\nsed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.",
      "tech": [
        "HTML",
        "CSS",
        "LESS",
        "Angular"
      ]
    }
  }
}
